% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vgi_insights_units.R
\name{vgi_insights_units}
\alias{vgi_insights_units}
\title{Get Units Sold Data for a Game}
\usage{
vgi_insights_units(
  steam_app_id,
  auth_token = Sys.getenv("VGI_AUTH_TOKEN"),
  headers = list()
)
}
\arguments{
\item{steam_app_id}{Integer. The Steam App ID of the game.}

\item{auth_token}{Character string. Your VGI API authentication token.
Defaults to the VGI_AUTH_TOKEN environment variable.}

\item{headers}{List. Optional custom headers to include in the API request.}
}
\value{
A data frame containing units sold history with columns:
\describe{
\item{steamAppId}{Integer. The Steam App ID}
\item{date}{Date. The date of the data point}
\item{unitsSoldChange}{Integer. Units sold change from previous period}
\item{unitsSoldTotal}{Integer. Total cumulative units sold}
}
}
\description{
Retrieve historical units sold data for a specific game.
}
\details{
The new API provides both incremental changes and cumulative totals for units sold.
This makes it easy to track both growth rates and absolute numbers.
}
\examples{
\dontrun{
# Get units sold history for a game
units_data <- vgi_insights_units(steam_app_id = 730)

# Plot cumulative units sold over time
plot(units_data$date, units_data$unitsSoldTotal, 
     type = "l", main = "Total Units Sold Over Time",
     xlab = "Date", ylab = "Total Units")

# Calculate daily sales for recent period
recent_data <- tail(units_data, 30)
daily_sales <- mean(recent_data$unitsSoldChange, na.rm = TRUE)
print(paste("Average daily sales (last 30 days):", round(daily_sales)))

# Find peak sales day
peak_day <- units_data[which.max(units_data$unitsSoldChange), ]
print(paste("Peak sales:", peak_day$unitsSoldChange, "on", peak_day$date))
}
}
