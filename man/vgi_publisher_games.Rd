% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vgi_publishers.R
\name{vgi_publisher_games}
\alias{vgi_publisher_games}
\title{Get Game IDs by Publisher}
\usage{
vgi_publisher_games(
  company_id,
  auth_token = Sys.getenv("VGI_AUTH_TOKEN"),
  headers = list()
)
}
\arguments{
\item{company_id}{Integer. The publisher's company ID.}

\item{auth_token}{Character string. Your VGI API authentication token.
Defaults to the VGI_AUTH_TOKEN environment variable.}

\item{headers}{List. Optional custom headers to include in the API request.}
}
\value{
A numeric vector of Steam App IDs for games published by this company.
}
\description{
Retrieve a list of Steam App IDs for all games by a specific publisher.
}
\details{
This endpoint now returns only game IDs instead of full game metadata.
To get detailed information about each game, use \code{vgi_game_metadata()}
with the returned IDs.

This approach is more efficient when you only need to:
\itemize{
\item Count the number of games by a publisher
\item Check if a publisher released a specific game
\item Get a subset of games for detailed analysis
}
}
\examples{
\dontrun{
# Get all game IDs for a publisher
game_ids <- vgi_publisher_games(company_id = 13190)

# Count games by this publisher
cat("Total games published:", length(game_ids), "\n")

# Get detailed info for the first 5 games
if (length(game_ids) > 0) {
  first_five <- head(game_ids, 5)
  game_details <- lapply(first_five, vgi_game_metadata)
  
  # Display game names
  for (game in game_details) {
    cat(game$name, "(", game$steamAppId, ")\n")
  }
}

# Analyze publisher's portfolio
if (length(game_ids) > 0) {
  # Get metadata for all games
  all_games <- vgi_game_metadata_batch(game_ids)
  
  # Group by genre
  genre_counts <- table(unlist(lapply(all_games$genres, function(x) x)))
  print("Publisher's genre distribution:")
  print(sort(genre_counts, decreasing = TRUE))
}

# Find publisher's most successful games
if (length(game_ids) > 10) {
  # Get revenue data for top games
  revenues <- lapply(head(game_ids, 10), function(id) {
    tryCatch({
      rev_data <- vgi_insights_revenue(id)
      list(id = id, revenue = rev_data$revenueTotal)
    }, error = function(e) NULL)
  })
  
  # Filter out NULLs and sort by revenue
  revenues <- revenues[!sapply(revenues, is.null)]
  revenues <- revenues[order(sapply(revenues, function(x) x$revenue), 
                            decreasing = TRUE)]
}
}
}
