% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vgi_game_rankings.R
\name{vgi_game_rankings}
\alias{vgi_game_rankings}
\title{Get Game Rankings}
\usage{
vgi_game_rankings(auth_token = Sys.getenv("VGI_AUTH_TOKEN"), headers = list())
}
\arguments{
\item{auth_token}{Character string. Your VGI API authentication token.
Defaults to the VGI_AUTH_TOKEN environment variable.}

\item{headers}{List. Optional custom headers to include in the API request.}
}
\value{
A data frame containing rankings for each game with columns:
\describe{
\item{steamAppId}{Integer. The Steam App ID}
\item{positiveReviewsRank}{Integer. Rank by positive reviews}
\item{positiveReviewsPrct}{Numeric. Percentile for positive reviews}
\item{totalRevenueRank}{Integer. Rank by total revenue}
\item{totalRevenuePrct}{Numeric. Percentile for total revenue}
\item{totalUnitsSoldRank}{Integer. Rank by total units sold}
\item{totalUnitsSoldPrct}{Numeric. Percentile for total units sold}
\item{yesterdayUnitsSoldRank}{Integer. Rank by yesterday's units sold}
\item{yesterdayUnitsSoldPrct}{Numeric. Percentile for yesterday's units sold}
\item{followersRank}{Integer. Rank by follower count}
\item{followersPrct}{Numeric. Percentile for followers}
\item{avgPlaytimeRank}{Integer. Rank by average playtime}
\item{avgPlaytimePrct}{Numeric. Percentile for average playtime}
}
}
\description{
Retrieve rankings for all games across various metrics including reviews, revenue,
units sold, followers, and playtime.
}
\details{
Rankings provide a comprehensive view of game performance across metrics:
\itemize{
\item Lower rank numbers indicate better performance (1 = best)
\item Percentiles show the percentage of games that rank below
\item Use multiple metrics to get a balanced view of game success
\item Recent sales rankings help identify trending games
}
}
\examples{
\dontrun{
# Get all game rankings
rankings <- vgi_game_rankings()

# Find top 10 games by revenue
top_revenue <- head(rankings[order(rankings$totalRevenueRank), ], 10)
print(top_revenue[, c("steamAppId", "totalRevenueRank", "totalRevenuePrct")])

# Find games that rank well across multiple metrics
# (top 100 in both revenue and reviews)
top_overall <- rankings[
  rankings$totalRevenueRank <= 100 & 
  rankings$positiveReviewsRank <= 100, 
]
print(paste("Games in top 100 for both revenue and reviews:", nrow(top_overall)))

# Identify trending games (high recent sales relative to total)
rankings$trending_score <- rankings$totalUnitsSoldRank / rankings$yesterdayUnitsSoldRank
trending <- head(rankings[order(rankings$trending_score, decreasing = TRUE), ], 20)

# Create a scatter plot of revenue vs reviews rankings
plot(rankings$totalRevenueRank, rankings$positiveReviewsRank,
     pch = 19, col = rgb(0, 0, 1, 0.1),
     xlab = "Revenue Rank", ylab = "Reviews Rank",
     main = "Game Rankings: Revenue vs Reviews")
abline(a = 0, b = 1, col = "red", lty = 2)

# Find hidden gems (great reviews but lower revenue)
hidden_gems <- rankings[
  rankings$positiveReviewsRank <= 50 & 
  rankings$totalRevenueRank > 200,
]
print(paste("Hidden gems found:", nrow(hidden_gems)))
}
}
