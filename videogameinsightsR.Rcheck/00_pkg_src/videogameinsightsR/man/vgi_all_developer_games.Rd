% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vgi_all_developer_games.R
\name{vgi_all_developer_games}
\alias{vgi_all_developer_games}
\title{Get All Developer Game IDs}
\usage{
vgi_all_developer_games(
  auth_token = Sys.getenv("VGI_AUTH_TOKEN"),
  headers = list()
)
}
\arguments{
\item{auth_token}{Character string. Your VGI API authentication token.
Defaults to the VGI_AUTH_TOKEN environment variable.}

\item{headers}{List. Optional custom headers to include in the API request.}
}
\value{
A data frame with columns:
\describe{
\item{developerId}{Integer. The developer's company ID}
\item{gameIds}{List. A list of Steam App IDs for games by this developer}
\item{gameCount}{Integer. Number of games by this developer}
}
}
\description{
Retrieve a comprehensive mapping of all developers to their game IDs,
useful for bulk analysis of developer portfolios.
}
\details{
This endpoint provides a complete developer-to-games mapping, enabling:
\itemize{
\item Portfolio size analysis across all developers
\item Developer productivity metrics
\item Market concentration studies
\item Genre specialization analysis
\item Developer ranking by output
}

Note: The gameIds column contains lists, which may need special handling
for certain analyses.
}
\examples{
\dontrun{
# Get all developer game mappings
dev_games <- vgi_all_developer_games()

# Find most prolific developers
top_devs <- head(dev_games[order(-dev_games$gameCount), ], 20)
cat("Top 20 most prolific developers:\n")
print(top_devs[, c("developerId", "gameCount")])

# Get developer names for context
dev_list <- vgi_developer_list()
top_devs_named <- merge(top_devs, dev_list, 
                       by.x = "developerId", by.y = "id")
print(top_devs_named[, c("name", "gameCount")])

# Analyze developer portfolio sizes
hist(dev_games$gameCount[dev_games$gameCount <= 50],
     breaks = 50,
     main = "Distribution of Developer Portfolio Sizes",
     xlab = "Number of Games",
     col = "lightblue")

# Find single-game developers
single_game_devs <- dev_games[dev_games$gameCount == 1, ]
cat("Developers with only one game:", nrow(single_game_devs), "\n")
cat("Percentage of single-game developers:", 
    round(nrow(single_game_devs) / nrow(dev_games) * 100, 1), "\%\n")

# Analyze specific developer's portfolio
valve_id <- 8  # Example: Valve's ID
valve_games <- dev_games$gameIds[dev_games$developerId == valve_id][[1]]
if (length(valve_games) > 0) {
  cat("Valve has", length(valve_games), "games\n")
  
  # Get metadata for all Valve games
  valve_metadata <- vgi_game_metadata_batch(valve_games)
  print(valve_metadata[, c("name", "releaseDate")])
}

# Find developers with similar portfolio sizes
target_size <- 10
similar_devs <- dev_games[dev_games$gameCount >= target_size - 2 & 
                         dev_games$gameCount <= target_size + 2, ]
cat("Developers with 8-12 games:", nrow(similar_devs), "\n")

# Calculate total games in database
total_games <- sum(dev_games$gameCount)
unique_games <- length(unique(unlist(dev_games$gameIds)))
cat("Total developer-game relationships:", total_games, "\n")
cat("Unique games:", unique_games, "\n")
cat("Average developers per game:", round(total_games / unique_games, 2), "\n")
}
}
